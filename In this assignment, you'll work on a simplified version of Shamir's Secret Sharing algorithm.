import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

public class Main {

    public static void main(String[] args) {
        // Simulating JSON data as a string
        String json = "{\n" +
                "    \"keys\": {\n" +
                "        \"n\": 4,\n" +
                "        \"k\": 3\n" +
                "    },\n" +
                "    \"1\": {\n" +
                "        \"base\": \"10\",\n" +
                "        \"value\": \"4\"\n" +
                "    },\n" +
                "    \"2\": {\n" +
                "        \"base\": \"2\",\n" +
                "        \"value\": \"111\"\n" +
                "    },\n" +
                "    \"3\": {\n" +
                "        \"base\": \"10\",\n" +
                "        \"value\": \"12\"\n" +
                "    },\n" +
                "    \"6\": {\n" +
                "        \"base\": \"4\",\n" +
                "        \"value\": \"213\"\n" +
                "    }\n" +
                "}";

        // Manually parsing the JSON-like data
        Map<String, Integer> kMap = extractK(json);
        int n = kMap.getOrDefault("n", 0);
        int k = kMap.getOrDefault("k", 0);

        if (n < k) {
            System.out.println("Invalid input: n should be greater than or equal to k.");
            return;
        }

        Map<Integer, BigInteger> rMap = extractR(json);

        // Calculate the constant term (secret) using Lagrange interpolation
        BigInteger s = calculateLagrange(rMap, k);
        System.out.println("The secret constant term is: " + s);
    }

    private static Map<String, Integer> extractK(String json) {
        Map<String, Integer> kMap = new HashMap<>();
        String kSec = json.split("\"keys\"")[1].split("},")[0];
        String[] kPairs = kSec.split("[{},\":]");

        for (int i = 0; i < kPairs.length; i++) {
            String key = kPairs[i].trim();
            if (key.equals("n") || key.equals("k")) {
                try {
                    String val = kPairs[i + 2].trim();
                    kMap.put(key, Integer.parseInt(val));
                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
                    System.out.println("Error parsing keys: " + e.getMessage());
                }
            }
        }
        return kMap;
    }

    private static Map<Integer, BigInteger> extractR(String json) {
        Map<Integer, BigInteger> rMap = new HashMap<>();
        String[] parts = json.split("\"keys\"")[1].split("\\},\\s*\"");

        for (String part : parts) {
            if (part.matches("\\d+\": \\{")) {
                String[] elems = part.split("[{},\":]");
                try {
                    int x = Integer.parseInt(elems[0].trim());
                    int base = Integer.parseInt(elems[2].trim());
                    BigInteger y = new BigInteger(elems[4].trim(), base);
                    rMap.put(x, y);
                } catch (Exception e) {
                    System.out.println("Error parsing roots: " + e.getMessage());
                }
            }
        }
        return rMap;
    }

    private static BigInteger calculateLagrange(Map<Integer, BigInteger> rMap, int k) {
        BigInteger res = BigInteger.ZERO;

        // Extract k points for Lagrange interpolation
        Integer[] xKeys = rMap.keySet().stream().limit(k).toArray(Integer[]::new);
        BigInteger[] yVals = rMap.values().stream().limit(k).toArray(BigInteger[]::new);

        if (xKeys.length < k || yVals.length < k) {
            System.out.println("Not enough points for Lagrange interpolation.");
            return res;
        }

        for (int i = 0; i < k; i++) {
            BigInteger term = yVals[i];

            for (int j = 0; j < k; j++) {
                if (i != j) {
                    BigInteger num = BigInteger.valueOf(-xKeys[j]);
                    BigInteger den = BigInteger.valueOf(xKeys[i] - xKeys[j]);
                    term = term.multiply(num).divide(den);
                }
            }
            res = res.add(term);
        }

        return res;
    }
}
